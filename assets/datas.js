const jsonDatas = {
    P1C1_SC2: {
        h: "Exploitez les outils ESLint et Prettier"
        , p: `Pour ce qui est des erreurs de code, ou tout simplement de la mise en forme, vous le savez s√ªrement d√©j√†, JavaScript est tr√®s souple : pas de compilation stricte qui vous signale vos erreurs. Heureusement, il existe des outils qui permettent d'√©crire du code plus propre !`
        , liens: ["https://player.vimeo.com/video/561864358?color=7451eb", "https://player.vimeo.com/video/561864399?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C1-solution"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C1-solution"]
        , tasks: {
            p: `Dans notre cas, nous allons nous int√©resser √† ESLint, qui va vous signaler des erreurs dans le code (aussi bien des erreurs de style que des erreurs basiques de code qui peuvent conduire √† des bugs), et Prettier, qui va le formater.`
            , ol: [
                `Cr√©er un fichier .eslintrc`
                , `Cr√©er un fichier .prettierrc`
            ]
        }
    },
    P1C1: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "____"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P1C2: {
        h: "Transformez votre application en Single Page Application avec React Router"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C2-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C2-solution"]
        , tasks: {
            p: `____`
            , ol: [
                `Cr√©er une nouvelle page  Results  et l'ajouter au router.`
                , `Cr√©er une nouvelle page  Freelances  , l'ajouter au router, et cr√©er un lien dans le  Header  .`
                , `Dans  Survey.jsx  , coder un lien  pr√©c√©dent  et un lien  suivant  qui permettent respectivement de passer √† la question pr√©c√©dente et √† la question suivante. `
                , [`Si la question actuelle est √† 1, le lien "pr√©c√©dent" n'est pas activ√©. `
                    , `Si la question est √† 10, le lien "suivant" ne s'affiche pas. √Ä la place, il y aura un lien "R√©sultats" qui redirigera vers la page "Results".`
                ]
            ]
        }
    },
    P1C2_SC2: {
        h: "Naviguez avec les Link"
        , p: `Profitons-en pour cr√©er notre header, avec les liens vers les diff√©rentes pages de notre application.`
        , liens: ["https://player.vimeo.com/video/561864520?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C2-screencast2"
        , sol: ["____"]
        , tasks: {
            p: `Maintenant que nous avons vu comment mettre en place le routing, j'en profite pour vous montrer comment d√©couper notre router quand nous avons beaucoup de routes √† g√©rer ‚Äì dans un projet de code plus important, par exemple. Alors suivez-moi dans le screencast ci-dessous !`
            , ol: [
                `.....`
                , `.....`
            ]
        }
    },
    P1C2_EX: {
        h: "R√©cup√©rez des param√®tres dans vos URL"
        , p: `Mais comment faire si vous voulez passer des param√®tres ? Par exemple, lorsqu'on va faire le questionnaire, et que le num√©ro de chaque question sera r√©cup√©r√© depuis l'URL ? `
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C2-exercice"
        , sol: ["____"]
        , tasks: {
            p: `Eh bien, bonne question ! Le router vous permet de r√©cup√©rer des param√®tres ; pour cela, il suffit d'√©crire votre route comme ici dans le fichier  index.jsx  √† la racine de  /src  :`
            , ol: [
                `<Route path="/survey/:questionNumber">
                    <Survey />
                </Route>`
                , `function Header() {
                    return (
                        <nav>
                            <Link to="/">Accueil</Link>
                            <Link to="/survey/42">Questionnaire</Link>
                        </nav>
                    )
                }`
                , `import { useParams } from 'react-router-dom'
 
                    function Survey() {
                        const { questionNumber } = useParams()
                    
                        return (
                            <div>
                                <h1>Questionnaire üßÆ</h1>
                                <h2>Question {questionNumber}</h2>
                            </div>
                        )
                    }
                `
            ]
        }
    },
    P1C3: {
        h: "Indiquez les types de vos props avec les PropTypes"
        , p: `utiliser les PropTypes pour s√©curiser votre application : `
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C3-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C3-solution"]
        , tasks: {
            p: `Pour cela`
            , ol: [
                `Ajouter  isRequired  √† toutes les props de  Card  .`
                , `Pr√©ciser une prop par d√©faut pour  title  ,  label  et  picture  . `
                , `Les props par d√©faut de  title  et  label  sont une string vide. La prop par d√©faut de  picture  est  DefaultPicture  ,  que nous avons utilis√©e dans ce chapitre. Vous pouvez supprimer les props inutiles.`
                , `√Ä l‚Äôavenir, vous devrez typer toutes les props de vos composants dans notre application.`
            ]
        }
    },
    P1C3_EX: {
        h: "Exigez une prop"
        , p: `Il est tr√®s simple de pr√©ciser qu'une prop est requise pour le bon fonctionnement de l'application. Pour cela, il suffit d'ajouter  isRequired  √† la suite du type d√©clar√©.`
        , liens: [""]
        , copypaste: ""
        , begin: "____"
        , sol: ["____"]
        , tasks: {
            p: `Par exemple, toujours pour  Card  , si on fait :`
            , ol: [
                `Card.propTypes = {
                    label: PropTypes.string,
                    title: PropTypes.string.isRequired,
                    picture: PropTypes.string
                }`
                , `et qu'on omet de d√©clarer la prop  title  , √ßa nous donne :`
                , `https://user.oc-static.com/upload/2021/06/04/16228080563879_image28.jpg`
            ]
        }
    },
    P1C4: {
        h: "Scopez votre CSS avec styled components"
        , p: `C'est maintenant le moment de vous exercer en autonomie sur la biblioth√®que  styled-components  . `
        , liens: ["https://www.figma.com/file/KlrToaA7Dj1Sm0opq37ICg/OC---React-2?node-id=2%3A144", "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/assets"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C4-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C4-solution"]
        , tasks: {
            p: `Cette fois-ci, vous devrez vous appuyer sur la maquette Figma et cr√©er le style pour : `
            , ol: [
                `le header (int√©gration du logo, position des liens) ;`
                , `la page d'accueil (int√©gration du texte, de l'illustration, du background, etc.) ;`
                , `la page Profils (texte au-dessus des Cards) ;`
                , `la page d'erreur.`
            ]
        }
    },
    P1C4_EX: {
        h: "Utilisez des variables, & , Cr√©ez un style global"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C4-exercice"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `On cr√©e donc un dossier  /utils  directement dans  src/  , dans lequel on met un dossier  /style  . On y cr√©e notre fichier  colors.js  , ce qui nous donne :`
                , `Dans  colors.js  , on d√©finit nos couleurs :`
                , `const colors = {
                        primary: '#5843E4',
                        secondary: '#8186A0',
                        backgroundLight: '#F9F9FC',
                    }
                    
                    export default colors`
                , `Pour l'utiliser, il nous suffit de l'importer directement dans notre template string :`
                , `const StyledLink = styled(Link)\`
                    padding: 15px;
                    color: #8186a0;
                    text-decoration: none;
                    font-size: 18px;
                    ${(props) =>
                        props.$isFullLink &&
                        `color: white; border-radius: 30px; background-color: ${colors.primary};`}
                \``
                , "..."
            ]
        }
    },
    P1C4_SC: {
        h: "Passez des props dans votre CSS"
        , p: `Quels autres avantages tire-t-on du fait d'√©crire notre style avec du JS ?`
        , liens: ["https://player.vimeo.com/video/561864577?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P1C4-screencast"
        , sol: ["____"]
        , tasks: {
            p: `... Eh bien justement, on utilise du JS. üòé Voyons voir concr√®tement ce que cela donne dans notre  Header  .`
            , ol: [
                `<StyledLink to="/survey/1" $isFullLink>
                    Faire le test
                </StyledLink>`
                , `Ici on passe la prop $isFullLink  . Ce qui nous permet d'utiliser la prop directement dans le style :`
                , `const StyledLink = styled(Link)\`
                    padding: 15px;
                    color: #8186a0;
                    text-decoration: none;
                    font-size: 18px;
                    ${(props) =>
                        props.$isFullLink &&
                        `color: white; border-radius: 30px; background-color: #5843E4;`}
                \``
                , `C'est quoi ce  $  ?`
                , `Eh bien, cela permet de signaler √†  styled-components  que notre prop nous sert pour le style, et qu'elle ne doit pas √™tre pass√©e dans le DOM.`
            ]
        }
    },
    P2C1: {
        h: "Exploitez vos connaissances de useState et useEffect pour effectuer des calls API"
        , p: `Vous avez r√©ussi √† r√©cup√©rer les donn√©es depuis le backend de l‚Äôagence Shiny : f√©licitations √† vous ! √Ä vous de jouer pour faire la m√™me chose pour la page des profils freelances. `
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C1-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C1-solution"]
        , tasks: {
            p: `Pour cela, vous allez devoir :`
            , ol: [
                `R√©cup√©rer les profils des freelances sur l‚Äôendpoint /freelances  de l‚ÄôAPI. Vous pouvez utiliser la syntaxe async  / await  ou les .then  .`
                , `Utiliser le Loader  lorsque le contenu des profils freelances est en train de charger.`
                , `Afficher les donn√©es dans la page.`
                , `Afficher une erreur s'il y a eu un probl√®me.`
            ]
        }
    },
    P2C1_EX: {
        h: "R√©cup√©rez les donn√©es d'une API"
        , p: `Pour nous atteler √† l'utilisation de l'API, nous allons d√©velopper la page /survey  . Souvenez-vous, dans le chapitre pr√©c√©dent, nous avions cr√©√© des liens pour naviguer entre les questions, et rediriger l'utilisateur sur /results  quand il atteignait la dixi√®me question. Eh bien, ici, nous allons continuer √† d√©velopper cette page afin de r√©cup√©rer les donn√©es depuis l'API.`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/blob/P2C1-exercice/src/index.jsx"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                ` on pourra r√©cup√©rer les donn√©es en faisantfetch('http://localhost:8000/survey')`
                , `Ici, on a donc uniquement besoin d‚Äôappeler l‚ÄôAPI √† la premi√®re initialisation de notre composant, et on pr√©cise un tableau de d√©pendances vide dans notre fichier  :`
                , "..."
            ]
        }
    },
    P2C1_SC: {
        h: "Cr√©ez un state loading"
        , p: `Une pratique tr√®s r√©pandue consiste √† mettre un petit loader pour signifier que les donn√©es vont bient√¥t s‚Äôafficher. On pourrait mettre un simple texte ‚ÄúChargement...‚Äù, mais bon, on sait manier le CSS : autant s‚Äôamuser avec, non ?`
        , liens: ["https://player.vimeo.com/video/561864633?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/blob/P2C1-screencast/src/index.jsx"
        , sol: ["____"]
        , tasks: {
            p: `Je vous propose de cr√©er un simple Loader  en CSS, directement dans le fichier utils/Atoms.jsx`
            , ol: [
                `Pour cela, on a √©galement besoin d‚Äôimporter keyframes  depuis la biblioth√®que styled-components  . `
                , `On va maintenant utiliser le state pour afficher notre Loader  . Pour cela, on cr√©e une variable isDataLoading  avec useState  :`
                , `const [isDataLoading, setDataLoading] = useState(false)`
                , `Dans le useEffect  , on vient modifier notre bool√©en :`
                , `useEffect(() => {
                        setDataLoading(true)
                        fetch('http://localhost:8000/survey')
                        .then((response) => response.json())
                        .then(({ surveyData }) => {
                        setSurveyData(surveyData)
                        setDataLoading(false)
                        })
                    }, [])`
                    , `... ce qui nous permet ainsi de conditionner le rendu de notre composant : le Loader  s‚Äôaffiche tant que les donn√©es chargent, et une fois qu‚Äôon les a bien, le contenu de la question s‚Äôaffiche √† la place du Loader  .`
                    , `Maintenant que nous avons le comportement que nous souhaitons, profitons-en pour impl√©menter une syntaxe un peu plus moderne, et pour g√©rer les erreurs :`
            ]
        }
    },
    P2C2: {
        h: "Partagez vos donn√©es avec le Contexte et useContext"
        , p: `Pour cet exercice, vous devez utiliser le Contexte pour r√©cup√©rer les r√©sultats du questionnaire entre les pages.`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C2-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C2-solution"]
        , tasks: {
            p: [`Dans context/index.jsx  , vous trouverez un SurveyProvider  pr√™t √† √™tre utilis√©.`
                , `Dans  /Survey/index.jsx  , vous trouverez la base de code pour stocker les r√©ponses de l'utilisateur dans le Contexte, ainsi que des boutons permettant de r√©pondre.`
                , ` Pour cet exercice, vous allez devoir :`
            ]
            , ol: [
                `Utiliser useTheme  dans votre Footer/index.jsx  .`
                , `Utiliser votre SurveyProvider dans src/index.jsx  .`
                , `Sauvegarder les r√©sultats dans votre state depuis pages/Survey/index.jsx  .`
                , `R√©cup√©rer les r√©sultats dans /pages/results.jsx  avec useContext  , et les afficher dans un simple console.log()`
            ]
        }
    },
    P2C2_EX: {
        h: "D√©couvrez le Contexte dans React"
        , p: `????`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C2-exercice"
        , sol: ["____"]
        , tasks: {
            p: `????`
            , ol: [
                `????`
            ]
        }
    },
    P2CSC: {
        h: "Tirez profit du Contexte et de useContext"
        , p: `La documentation de React dit que "le Contexte est con√ßu pour partager des donn√©es qui peuvent √™tre consid√©r√©es comme globales", et cite en exemple des donn√©es sur l‚Äôutilisateur actuellement authentifi√©, le th√®me, la langue utilis√©e, etc.`
        , liens: ["https://player.vimeo.com/video/561864470?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C2-screencast"
        , sol: ["____"]
        , tasks: {
            p: `Nous allons commencer en douceur avec le contexte pour cr√©er un Dark Mode (mode nuit) pour notre application. Vous savez, ce th√®me de couleurs plut√¥t sombres qui permet de reposer ses yeux devant l‚Äô√©cran.`
            , ol: [
                `...`
                , `Comme je vous le disais, vous √™tes un chanceux : avant les hooks, le Contexte √©tait plus compliqu√© √† mettre en ≈ìuvre. Je vous fais une d√©monstration juste en dessous de comment √ßa se passait. üëá`
            ]
        }
    },
    P2C3: {
        h: "Allez plus loin avec les hooks"
        , p: `Maintenant que nous avons cr√©√© un hook personnalis√© pour faire des calls API useFetch  , vous allez pouvoir l‚Äôutiliser pour les pages /Freelances  ainsi que /Results  .`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C3-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C3-solution"]
        , tasks: {
            p: `ous allez √©galement devoir cr√©er un hook personnalis√© useTheme  qui r√©cup√®re le Contexte du theme  et vous permet de r√©cup√©rer le th√®me actuel (  dark  ou light  ).`
            , ol: [
                `√Ä partir de l√†, vous pouvez int√©grer les changements de style pour le th√®me, et int√©grer la page /results  en fonction des maquettes si vous voulez vous challenger`
            ]
        }
    },
    P2C3_EX: {
        h: "Cr√©ez un hook pour vos calls API, & , Ajoutez une gestion d‚Äôerreur"
        , p: `____`
        , liens: ["https://fr.reactjs.org/docs/hooks-reference.html"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C3-exercice"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P2C3_SC: {
        h: "Cr√©ez vos propres hooks pour simplifier votre code"
        , p: `Nous allons en profiter pour utiliser useFetch  pour envoyer les r√©ponses de l'utilisateur, et donc r√©cup√©rer les r√©sultats de notre API depuis la page /results  .`
        , liens: ["https://player.vimeo.com/video/561864685?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P2C3-screencast"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P3C1: {
        h: "D√©couvrez la base des tests dans React avec Jest"
        , p: `Peu importe le langage dans lequel vous d√©veloppez, les tests font partie int√©grante du m√©tier de d√©veloppeur, m√™me en frontend. Ils permettent de s'assurer de la fiabilit√© de votre code.`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C1-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C1-solution"]
        , tasks: {
            p: `Pour cet exercice, vous continuerez √† tester pages/results/index.jsx  avec la fonction formatQueryParams  .`
            , ol: [
                `Vous devrez cr√©er deux tests diff√©rents pour formatQueryParams  au sein d'une s√©rie de tests (regroup√©s dans describe()  ).`
            ]
        }
    },
    P3C1_EX: {
        h: "Cr√©ez votre premier test avec Jest........."
        , p: `Comme tout ce qui a trait √† JavaScript, l'√©cosyst√®me des tests √©volue tr√®s vite. Dans cette partie, nous allons utiliser Jest et React Testing Library.`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C1-exercice"
        , sol: ["____"]
        , tasks: {
            p: `Maintenant, √©crivons un test unitaire.`
            , ol: [
                `Pr√©parez votre code`
                , `Cr√©ez votre fichier de test`
                , `Comprenez la r√©daction du test`
            ]
        }
    },
    P3C1_SC: {
        h: "Cr√©ez votre premier test avec Jest"
        , p: `____`
        , liens: ["https://player.vimeo.com/video/561864765?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C1-screencast"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P3C2: {
        h: "Testez vos composants avec React Testing Library"
        , p: `J'ai √©galement ajout√© une fonctionnalit√© qui permet de s√©lectionner un profil en cliquant dessus pour le mettre en "favori" : cela permet d'ajouter des emojis  ‚≠êÔ∏è   autour de son nom.`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C2-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C2-solution"]
        , tasks: {
            p: `Ici, vous devrez :`
            , ol: [
                `Cr√©er un fichier de test pour Card  . `
                , `V√©rifier que Card utilise bien la picture  que vous lui passez en props.`
                , `Tester que lorsque vous lui passez une props title  , elle s'affiche bien.`
                , `V√©rifier que le titre change bien lorsqu'un profil est s√©lectionn√© dans les favoris (pour cela, vous pouvez utiliser la m√©thode closest  (dont je vous mets le lien de la documentation ici), qui vous permettra d'acc√©der √† la div  parente la plus proche).`
            ]
        }
    },
    P3C2_EX: {
        h: "?.?????"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C2-exercice"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P3C2_SC: {
        h: "Testez les √©v√©nements de vos composants"
        , p: `____`
        , liens: ["https://player.vimeo.com/video/561864803?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C2-screencast"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `Interagissez avec un √©l√©ment`
                `____`
            ]
        }
    },
    P3C3: {
        h: "Allez plus loin dans vos tests"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C3-begin"
        , sol: ["https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C3-solution"]
        , tasks: {
            p: `Vous allez devoir cr√©er les tests pour Results/index.jsx  . Il vous faudra √©galement mocker les donn√©es comme vous l'avez vu dans ce chapitre`
            , ol: [
                `____`
            ]
        }
    },
    P3C3_EX: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C3-exercice"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P3C3_SC: {
        h: "D√©couvrez d'autres types de tests"
        , p: `Vous avez appris √† cr√©er des tests unitaires avec Jest et √† tester vos composants avec React Testing Library. Vous avez test√© vos interactions et pu simuler des appels API. Mais vous vous en doutez peut-√™tre : le sujet des tests est tr√®s vaste. Il existe de nombreux outils et de nombreuses approches.`
        , liens: ["https://player.vimeo.com/video/561864899?color=7451eb"]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C3-screencast"
        , sol: ["____"]
        , tasks: {
            p: `Dans le screencast ci-dessous, je vous fais la d√©mo d'une autre approche que nous n'avons pas vue ensemble. üëá`
            , ol: [
                `____`
            ]
        }
    },
    P3C3_SC2: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "____"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P3C4_EX: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P3C4-exercice"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P4C1: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "____"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P4C1_EX: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P4C1-exercice"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P4C1_SC: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P4C1-screencast"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P4C2: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "____"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P4C2_EX: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P4C2-exercice"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
    P4C2_SC: {
        h: "____"
        , p: `____`
        , liens: [""]
        , copypaste: ""
        , begin: "https://github.com/OpenClassrooms-Student-Center/7150606-React-intermediaire/tree/P4C2-screencast"
        , sol: ["____"]
        , tasks: {
            p: `____`
            , ol: [
                `____`
            ]
        }
    },
}